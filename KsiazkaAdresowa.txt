#include <sstream>
#include <iostream>
#include <windows.h>
#include <conio.h>
#include <iomanip>
#include <fstream>
#include <string>
#include <vector>

using namespace std;

struct Uzytkownik {
    int idUzytkownika;
    string login, haslo;
};

struct Adresat {
    int id, idUzytkownika;
    string imie, nazwisko, nrTel, adresZamieszkania, email;
};

string wczytajLinie() {
    string wejscie = "";
    cin.sync();
    getline(cin, wejscie);
    return wejscie;
}

char wczytajZnak() {
    string wejscie = "";
    char znak = {0};
    cout << "Podaj znak: ";

    while (true) {
        cin.sync();
        wejscie = wczytajLinie();
        if (wejscie.length() == 1) {
            znak = wejscie[0];
            break;
        }
        cout << "To nie jest znak. Podaj ponownie: ";
    }
    return znak;
}

void pokazKomunikatKoncowy() {
    cout << endl << "Wcisnij enter zeby wyjsc do menu glownego: ";
    getch();
}

void wyswietlInformacjeOBrakuAdresatow(int brakAdresatow, string tresc) {
    if (brakAdresatow == 0) {
        cout << "Brak adresatow o takim " << tresc;
    }
}

vector<string> podzielSeparatoremCiagNaDane(string wiersz, char SEPARATOR, vector<string> wszystkieDane) {
    stringstream ss(wiersz);
    string danaAdresata;

    while (!ss.eof()) {
        getline(ss, danaAdresata, SEPARATOR);
        wszystkieDane.push_back(danaAdresata);
    }
    return wszystkieDane;
}

Adresat wczytajDaneAdresata(vector<string> wszystkieDaneAdresata, vector<Adresat>& adresaci) {
    Adresat przechowywalniaDanych;

    przechowywalniaDanych.id = (stoi(wszystkieDaneAdresata[0]));
    przechowywalniaDanych.idUzytkownika = (stoi(wszystkieDaneAdresata[1]));
    przechowywalniaDanych.imie = wszystkieDaneAdresata[2];
    przechowywalniaDanych.nazwisko = wszystkieDaneAdresata[3];
    przechowywalniaDanych.nrTel = wszystkieDaneAdresata[4];
    przechowywalniaDanych.adresZamieszkania = wszystkieDaneAdresata[5];
    przechowywalniaDanych.email = wszystkieDaneAdresata[6];

    adresaci.push_back(przechowywalniaDanych);
    return przechowywalniaDanych;
}

void wczytajAdresatowZPliku(vector<Adresat>& adresaci) {
    string wiersz = "";
    const char SEPARATOR = '|';

    fstream plikTekstowy;

    plikTekstowy.open("Adresaci.txt", ios::app); //gdy nie ma jeszcze utworzonego pliku tworzy go
    plikTekstowy.close();

    plikTekstowy.open("Adresaci.txt", ios::in);

    vector<string> wszystkieDaneAdresata;

    while (!plikTekstowy.eof()) {
        getline(plikTekstowy, wiersz);
        if (wiersz == "") {
            continue;
        } else {
            wszystkieDaneAdresata.clear();
            wszystkieDaneAdresata = podzielSeparatoremCiagNaDane(wiersz, SEPARATOR, wszystkieDaneAdresata);
            wczytajDaneAdresata(wszystkieDaneAdresata, adresaci);
        }
    }
    plikTekstowy.close();
}

char wyswietlMenuGlowne() {
    char wybor = {0};

    system("cls");
    cout << "KSIAZKA ADRESOWA" << endl << endl;
    cout << "1. Logowanie " << endl;
    cout << "2. Rejestracja " << endl;
    cout << "9. Zamknij program  " << endl << endl;

    return wybor = wczytajZnak();
}

void wyswietlMenu() {
    system("cls");
    cout << "KSIAZKA ADRESOWA" << endl << endl;
    cout << "1. Dodaj adresata  " << endl;
    cout << "2. Wyszukaj po imieniu  " << endl;
    cout << "3. Wyszukaj po nazwisku  " << endl;
    cout << "4. Wyswietl wszystkich adresatow  " << endl;
    cout << "5. Usun adresata  " << endl;
    cout << "6. Edytuj adresata  " << endl;
    cout << "7. Zmien haslo " << endl;
    cout << "9. Wyloguj  " << endl<< endl;
}

string polaczDaneAdresataWJedenCiag(Adresat przechowywalniaDanych) {
    const string SEPARATOR = "|";
    string daneDodawanegoAdresata = "";
    string IDstr = to_string(przechowywalniaDanych.id);
    string IDUzytkownika = to_string(przechowywalniaDanych.idUzytkownika);

    daneDodawanegoAdresata += IDstr + SEPARATOR;
    daneDodawanegoAdresata += IDUzytkownika + SEPARATOR;
    daneDodawanegoAdresata += przechowywalniaDanych.imie + SEPARATOR;
    daneDodawanegoAdresata += przechowywalniaDanych.nazwisko + SEPARATOR;
    daneDodawanegoAdresata += przechowywalniaDanych.nrTel + SEPARATOR;
    daneDodawanegoAdresata += przechowywalniaDanych.adresZamieszkania + SEPARATOR;
    daneDodawanegoAdresata += przechowywalniaDanych.email + SEPARATOR;

    return daneDodawanegoAdresata;
}

string polaczDaneUzytkownikaWJedenCiag(Uzytkownik przechowywalniaDanych) {
    const string SEPARATOR = "|";
    string daneDodawanegoUzytkownika = "";
    string IDstr = to_string(przechowywalniaDanych.idUzytkownika);

    daneDodawanegoUzytkownika += IDstr + SEPARATOR;
    daneDodawanegoUzytkownika += przechowywalniaDanych.login + SEPARATOR;
    daneDodawanegoUzytkownika += przechowywalniaDanych.haslo + SEPARATOR;

    return daneDodawanegoUzytkownika;
}

void dodajAdresata(vector<Adresat>& adresaci, int idUzytkownika) {
    string daneDodawanegoAdresata;
    Adresat przechowywalniaDanych;

    fstream plikTekstowy;

    plikTekstowy.open("Adresaci.txt", ios::out | ios::app);

    if (plikTekstowy.good() == true) {
        if (adresaci.size() == 0) {
            przechowywalniaDanych.id = 1;
        } else {
            przechowywalniaDanych.id = adresaci.back().id + 1;
        }
        przechowywalniaDanych.idUzytkownika = idUzytkownika;
        cout << setw(20) << "Podaj imie:               ";
        przechowywalniaDanych.imie = wczytajLinie();
        cout << setw(20) << "Podaj nazwisko:           ";
        przechowywalniaDanych.nazwisko = wczytajLinie();
        cout << setw(20) << "Podaj numer telefonu:     ";
        przechowywalniaDanych.nrTel = wczytajLinie();
        cout << setw(20) << "Podaj adres zamieszkania: ";
        przechowywalniaDanych.adresZamieszkania = wczytajLinie();
        cout << setw(20) << "Podaj email:              ";
        przechowywalniaDanych.email = wczytajLinie();

        adresaci.push_back(przechowywalniaDanych);

        if (adresaci.size() == 1) {
            daneDodawanegoAdresata = polaczDaneAdresataWJedenCiag(przechowywalniaDanych);
            plikTekstowy << daneDodawanegoAdresata;
        } else {
            daneDodawanegoAdresata = polaczDaneAdresataWJedenCiag(przechowywalniaDanych);
            plikTekstowy << endl << daneDodawanegoAdresata;
        }

        cout << "Dane adresata zostaly poprawnie zapisane" << endl;
        system("pause");

    } else {
        cout << "Nie udalo sie  otworzyc pliku tekstowego i zapisac do niego danych" << endl;
        system("pause");
    }

    plikTekstowy.close();
}

void rekonstruujPlikAdresatow(vector <Adresat> adresaci) {
    string daneDodawanegoAdresata;
    fstream plikTekstowy;

    plikTekstowy.open("Adresaci.txt", ios::out);

    daneDodawanegoAdresata = polaczDaneAdresataWJedenCiag(adresaci[0]);
    plikTekstowy  << daneDodawanegoAdresata;

    for (unsigned int i = 1; i < adresaci.size(); i++) {
        daneDodawanegoAdresata = polaczDaneAdresataWJedenCiag(adresaci[i]);
        plikTekstowy  << endl << daneDodawanegoAdresata;
    }

    plikTekstowy.close();
}

void rekonstruujPlikUzytkownikow(vector <Uzytkownik> uzytkownicy) {
    string daneDodawanegoUzytkownika;
    fstream plikTekstowy;

    plikTekstowy.open("Uzytkownicy.txt", ios::out);

    daneDodawanegoUzytkownika = polaczDaneUzytkownikaWJedenCiag(uzytkownicy[0]);
    plikTekstowy  << daneDodawanegoUzytkownika;

    for (unsigned int i = 1; i < uzytkownicy.size(); i++) {
        daneDodawanegoUzytkownika = polaczDaneUzytkownikaWJedenCiag(uzytkownicy[i]);
        plikTekstowy  << endl << daneDodawanegoUzytkownika;
    }

    plikTekstowy.close();
}

void wyswietlPodsumowanieDanych(Adresat kolejnyAdresat) {
    cout << endl << setw(20) << "ID adresata:        " << kolejnyAdresat.id << endl;
    cout << setw(20) << "ID uzytkownika:     " << kolejnyAdresat.idUzytkownika << endl;
    cout << setw(20) << "Imie:               " << kolejnyAdresat.imie << endl;
    cout << setw(20) << "Nazwisko:           " << kolejnyAdresat.nazwisko << endl;
    cout << setw(20) << "Numer telefonu:     " << kolejnyAdresat.nrTel << endl;
    cout << setw(20) << "Adres zamieszkania: " << kolejnyAdresat.adresZamieszkania << endl;
    cout << setw(20) << "Email:              " << kolejnyAdresat.email << endl;
}

void znajdzAdresataPoImieniu(vector<Adresat> adresaci, int idUzytkownika) {
    string wejscie = "";
    string tresc = "imieniu";
    int brakAdresatow = 0;

    system("cls");
    cout << "Wpisz imie szukanego adresata: ";

    wejscie = wczytajLinie();

    for (Adresat kolejnyAdresat : adresaci) {
        if (kolejnyAdresat.imie == wejscie && kolejnyAdresat.idUzytkownika == idUzytkownika) {
            wyswietlPodsumowanieDanych(kolejnyAdresat);
            brakAdresatow++;
        }
    }

    wyswietlInformacjeOBrakuAdresatow(brakAdresatow, tresc);
    pokazKomunikatKoncowy();
}

void znajdzAdresataPoNazwisku(vector<Adresat> adresaci, int idUzytkownika) {
    string wejscie = "";
    string tresc = "nazwisku";
    int brakAdresatow = 0;

    system("cls");
    cout << "Wpisz nazwisko szukanego adresata: ";

    wejscie = wczytajLinie();

    for (Adresat kolejnyAdresat : adresaci) {
        if (kolejnyAdresat.nazwisko == wejscie && kolejnyAdresat.idUzytkownika == idUzytkownika) {
            wyswietlPodsumowanieDanych(kolejnyAdresat);
            brakAdresatow++;
        }
    }

    wyswietlInformacjeOBrakuAdresatow(brakAdresatow, tresc);
    pokazKomunikatKoncowy();
}

void pokazWszystkichAdresatowUzytkownika(vector<Adresat> adresaci, int idUzytkownika) {
    int brakAdresatow = 0;

    system("cls");

    for (Adresat kolejnyAdresat : adresaci) {
        if (kolejnyAdresat.idUzytkownika == idUzytkownika) {
            wyswietlPodsumowanieDanych(kolejnyAdresat);
            brakAdresatow++;
        }
    }

    if (brakAdresatow == 0) {
        cout << "Ksizaka adresowa uzytkownika jest pusta";
    }

    pokazKomunikatKoncowy();
}

void usunAdresata(vector<Adresat>& adresaci, int idUzytkownika) {
    int wejscie;
    int brakAdresatow = 0;
    char znak;
    string tresc = "id";

    system("cls");
    cout << "Wpisz id adresata, ktorego chcesz usunac: ";

    wejscie = stoi(wczytajLinie());

    for (int i = 0; i < (int) adresaci.size(); i++) {
        if (adresaci[i].id == wejscie && adresaci[i].idUzytkownika == idUzytkownika) {
            wyswietlPodsumowanieDanych(adresaci[i]);
            cout << "Czy napewno chcesz usunac podanego adresata? <t-tak><pozostale-nie> ";
            znak = wczytajZnak();

            if (znak == 't') {
                adresaci.erase(adresaci.begin() + i);
                rekonstruujPlikAdresatow(adresaci);
                cout << "Usunieto adresata";
            }

            brakAdresatow++;
            break;
        }
    }

    wyswietlInformacjeOBrakuAdresatow(brakAdresatow, tresc);
    pokazKomunikatKoncowy();
}

void wyswietlPodmenu() {
    cout << endl << "1. Zmien imie ";
    cout << endl << "2. Zmien nazwisko ";
    cout << endl << "3. Zmien numer telefonu ";
    cout << endl << "4. Zmien adres zamieszkania ";
    cout << endl << "5. Zmien email ";
    cout << endl << "9. Wyjdz ";
}

void edytujDane(vector<Adresat>& adresaci, int idUzytkownika) {
    int wejscie;
    int brakAdresatow = 0;
    char znak;
    string tresc = "id";

    system("cls");
    cout << "Wpisz id adresata ktorego chcesz edytowac: ";

    wejscie = stoi(wczytajLinie());

    for (size_t i = 0; i < adresaci.size(); i++) {

        if (adresaci[i].id == wejscie && adresaci[i].idUzytkownika == idUzytkownika) {
            wyswietlPodsumowanieDanych(adresaci[i]);
            wyswietlPodmenu();

            cout << endl << "Wybierz co chcesz zmienic: ";
            znak = wczytajZnak();

            switch (znak) {
            case '1':
                cout << endl << "Wpisz nowe imie: ";
                adresaci[i].imie = wczytajLinie();
                break;
            case '2':
                cout << endl << "Wpisz nowe nazwisko: ";
                adresaci[i].nazwisko = wczytajLinie();
                break;
            case '3':
                cout << endl << "Wpisz nowy numer telefonu: ";
                adresaci[i].nrTel = wczytajLinie();
                break;
            case '4':
                cout << endl << "Wpisz nowy adres zamieszkania: ";
                adresaci[i].adresZamieszkania = wczytajLinie();
                break;
            case '5':
                cout << endl << "Wpisz nowy email: ";
                adresaci[i].email = wczytajLinie();
                break;
            case '9':
                exit(1);
                break;
            default:
                cout << "Bledny wybor";
                system("pause");
                break;
            }

            rekonstruujPlikAdresatow(adresaci);
            cout << "Zmieniono dane" << endl;

            brakAdresatow++;
            break;
        }
    }

    wyswietlInformacjeOBrakuAdresatow(brakAdresatow, tresc);
    pokazKomunikatKoncowy();
}

string stworzHaslo() {
    string haslo;
    int licznikProb = 1;
    int ILOSC_PROB = 3;

    haslo = wczytajLinie();
    cout << "Powtorz haslo: ";

    while (licznikProb <= ILOSC_PROB) {
        if (wczytajLinie() == haslo) {
            cout << "Hasla zgadzaja sie ";
            break;
        } else if (licznikProb < ILOSC_PROB) {
            cout << "Hasla roznia sie. Sprobuj jeszcze raz: ";
        } else {
            cout << "Hasla roznia sie. Wpisz od nowa haslo: ";
            haslo = wczytajLinie();
            cout << "Powtorz haslo: ";
            licznikProb = 0;
        }

        licznikProb++;
    }

    return haslo;
}

void zmienHaslo (vector <Uzytkownik>& uzytkownicy, int idUzytkownika) {
    string hasloWpisane;
    bool zmianaHaslaUdana = false;

    cout << "Aby zmienic haslo podaj stare haslo: ";
    hasloWpisane = wczytajLinie();

    for (int i = 0; i < (int) uzytkownicy.size(); i++) {
        if (uzytkownicy[i].idUzytkownika == idUzytkownika && uzytkownicy[i].haslo == hasloWpisane) {
            cout << "Podaj nowe haslo: ";
            uzytkownicy[i].haslo = stworzHaslo();
            cout << endl<< "Zmieniono haslo ";
            zmianaHaslaUdana = true;
            rekonstruujPlikUzytkownikow(uzytkownicy);
            system("pause");
            break;
        }
    }

    if (!zmianaHaslaUdana) {
        cout << "Zle haslo ";
        system("pause");
    }
}

bool wyborOpcjiMenu(vector <Adresat>& adresaci, vector <Uzytkownik>& uzytkownicy, int idUzytkownika) {
    char wybor = {0};

    wybor = wczytajZnak();

    switch (wybor) {
    case '1':
        dodajAdresata(adresaci, idUzytkownika);
        break;
    case '2':
        znajdzAdresataPoImieniu(adresaci, idUzytkownika);
        break;
    case '3':
        znajdzAdresataPoNazwisku(adresaci, idUzytkownika);
        break;
    case '4':
        pokazWszystkichAdresatowUzytkownika(adresaci, idUzytkownika);
        break;
    case '5':
        usunAdresata(adresaci, idUzytkownika);
        break;
    case '6':
        edytujDane(adresaci, idUzytkownika);
        break;
    case '7':
        zmienHaslo(uzytkownicy, idUzytkownika);
        break;
    case '9':
        return false;
    default:
        cout << "Bledny wybor";
        system("pause");
    }

    return true;
}

bool sprawdzCzyLoginJestJuzZajety(vector<Uzytkownik> uzytkownicy, string login) {
    for (Uzytkownik daneUzytkownika : uzytkownicy) {
        if (daneUzytkownika.login == login) {
            cout << "Login zajety. Podaj inny: ";
            return true;
        }
    }

    cout << "Login w porzadku " << endl;
    return false;
}

string stworzLogin(vector<Uzytkownik> uzytkownicy) {
    bool zajety;
    string login;

    do {
        login = wczytajLinie();
        zajety = sprawdzCzyLoginJestJuzZajety(uzytkownicy, login);
    } while(zajety);

    return login;
}

Uzytkownik wczytajDaneUzytkownika (vector<string> wszystkieDaneUzytkownika, vector<Uzytkownik>& uzytkownicy) {
    Uzytkownik przechowywalniaDanych;

    przechowywalniaDanych.idUzytkownika = (stoi(wszystkieDaneUzytkownika[0]));
    przechowywalniaDanych.login = wszystkieDaneUzytkownika[1];
    przechowywalniaDanych.haslo = wszystkieDaneUzytkownika[2];

    uzytkownicy.push_back(przechowywalniaDanych);

    return przechowywalniaDanych;
}

void wczytajUzytkownikowZPliku (vector<Uzytkownik>& uzytkownicy) {
    string wiersz = "";
    const char SEPARATOR = '|';
    vector<string> wszystkieDaneUzytkownika;
    fstream plikTekstowy;

    plikTekstowy.open("Uzytkownicy.txt", ios::app); //gdy nie ma jeszcze utworzonego pliku tworzy go
    plikTekstowy.close();

    plikTekstowy.open("Uzytkownicy.txt", ios::in);

    if (plikTekstowy.good()) {
        while (getline(plikTekstowy, wiersz)) {
            wszystkieDaneUzytkownika = podzielSeparatoremCiagNaDane(wiersz, SEPARATOR, wszystkieDaneUzytkownika);
            wczytajDaneUzytkownika(wszystkieDaneUzytkownika, uzytkownicy);
            wszystkieDaneUzytkownika.clear();
        }
    }

    plikTekstowy.close();
}

void zarejestruj(vector<Uzytkownik>& uzytkownicy) {
    string daneDodawanegoUzytkownika;
    Uzytkownik daneTymczasowe;
    fstream plikTekstowy;

    if (uzytkownicy.size() != 0) {
        daneTymczasowe.idUzytkownika = uzytkownicy.back().idUzytkownika + 1;
    } else {
        daneTymczasowe.idUzytkownika = 1;
    }

    cout << "Stworz login: ";
    daneTymczasowe.login = stworzLogin(uzytkownicy);
    cout << "Stworz haslo: ";
    daneTymczasowe.haslo = stworzHaslo();
    uzytkownicy.push_back(daneTymczasowe);

    plikTekstowy.open("Uzytkownicy.txt", ios::app);

    daneDodawanegoUzytkownika = polaczDaneUzytkownikaWJedenCiag(daneTymczasowe);
    plikTekstowy << daneDodawanegoUzytkownika << endl;

    plikTekstowy.close();

    cout << endl << "Konto zostalo utworzone ";
    system("pause");
}

int zaloguj(vector <Uzytkownik>& uzytkownicy, vector <Adresat>& adresaci) {
    string login, haslo;
    int idUzytkownika;
    bool warunek = true;

    cout << "Podaj login: ";
    login = wczytajLinie();

    for (Uzytkownik daneUzytkownika : uzytkownicy) {
        if (daneUzytkownika.login == login) {
            cout << "Podaj haslo ";
            haslo = wczytajLinie();
            if (daneUzytkownika.haslo == haslo) {
                cout << "Zalogowano ";
                system("pause");
                idUzytkownika = daneUzytkownika.idUzytkownika;
                while (warunek) {
                    wyswietlMenu();
                    warunek = wyborOpcjiMenu(adresaci, uzytkownicy, idUzytkownika);
                }
            } else {
                cout << "Haslo niepoprawne";
                system("pause");
            }
            return 0;
        }
    }

    cout << "Brak takiego loginu ";
    system("pause");
    return 0;
}

int main() {
    vector <Adresat> adresaci;
    vector <Uzytkownik> uzytkownicy;
    char wybor = {0};

    wczytajUzytkownikowZPliku(uzytkownicy);
    wczytajAdresatowZPliku(adresaci);

    while (1) {
        wybor = wyswietlMenuGlowne();

        switch (wybor) {
        case '1':
            zaloguj(uzytkownicy, adresaci);
            break;
        case '2':
            zarejestruj(uzytkownicy);
            break;
        case '9':
            exit(1);
            break;
        default:
            cout << "Bledny wybor";
            system("pause");
        }
    }
    return 0;
}
